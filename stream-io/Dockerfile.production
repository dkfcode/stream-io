# Multi-stage build for StreamGuide production deployment
FROM node:18-alpine AS base

# Install dependencies for native modules and PostgreSQL client
RUN apk add --no-cache python3 make g++ postgresql-client bash

# ================================
# Backend Build Stage
# ================================
FROM base AS backend-builder

WORKDIR /app/backend

# Copy backend package files
COPY backend/package*.json ./

# Install backend dependencies
RUN npm ci

# Copy backend source code
COPY backend/ ./

# Build backend
RUN npm run build

# ================================
# Frontend Build Stage
# ================================
FROM base AS frontend-builder

WORKDIR /app

# Copy frontend package files
COPY package*.json ./
COPY build.sh ./

# Make build script executable
RUN chmod +x build.sh

# Install frontend dependencies
RUN npm ci

# Copy frontend source code
COPY . .

# Remove backend directory to avoid conflicts
RUN rm -rf backend

# Set build-time environment variables
ARG VITE_API_URL
ARG VITE_TMDB_ACCESS_TOKEN
ARG VITE_GEMINI_API_KEY
ARG VITE_APP_URL
ARG NODE_ENV=production

ENV NODE_ENV=${NODE_ENV}
ENV VITE_API_URL=${VITE_API_URL}
ENV VITE_TMDB_ACCESS_TOKEN=${VITE_TMDB_ACCESS_TOKEN}
ENV VITE_GEMINI_API_KEY=${VITE_GEMINI_API_KEY}
ENV VITE_APP_URL=${VITE_APP_URL}
ENV VITE_PRODUCTION_BUILD=true

# Build frontend
RUN ./build.sh

# ================================
# Production Stage - Combined App
# ================================
FROM node:18-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache postgresql-client

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S streamguide -u 1001

WORKDIR /app

# Copy backend build and dependencies
COPY --from=backend-builder --chown=streamguide:nodejs /app/backend/dist ./backend
COPY --from=backend-builder --chown=streamguide:nodejs /app/backend/node_modules ./backend/node_modules
COPY --from=backend-builder --chown=streamguide:nodejs /app/backend/package*.json ./

# Copy frontend build
COPY --from=frontend-builder --chown=streamguide:nodejs /app/dist ./public

# Create necessary directories
RUN mkdir -p logs && chown streamguide:nodejs logs

# Copy startup script
COPY --chown=streamguide:nodejs scripts/production-start.sh ./start.sh
RUN chmod +x start.sh

# Switch to non-root user
USER streamguide

# Expose port (Coolify will map this to 80/443)
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start the application
CMD ["./start.sh"] 